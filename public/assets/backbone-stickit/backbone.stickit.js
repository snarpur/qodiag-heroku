(function($){Backbone.Stickit={_handlers:[],addHandler:function(handlers){handlers=_.map(_.flatten([handlers]),function(handler){return _.extend({updateModel:true,updateView:true,updateMethod:"text"},handler)});this._handlers=this._handlers.concat(handlers)}};_.extend(Backbone.View.prototype,{_modelBindings:null,unstickit:function(model){_.each(this._modelBindings,_.bind(function(binding,i){if(model&&binding.model!==model){return false}binding.model.off(binding.event,binding.fn);binding.model.trigger("stickit:unstuck");delete this._modelBindings[i]},this));this._modelBindings=_.compact(this._modelBindings);this.$el.off(".stickit"+(model?"."+model.cid:""))},stickit:function(optionalModel,optionalBindingsConfig){var self=this,model=optionalModel||this.model,namespace=".stickit."+model.cid,bindings=optionalBindingsConfig||this.bindings||{};this._modelBindings||(this._modelBindings=[]);this.unstickit(model);_.each(_.keys(bindings),function(selector){var $el,options,modelAttr,config,binding=bindings[selector]||{},bindId=_.uniqueId();if(selector!=":el"){$el=self.$(selector)}else{$el=self.$el;selector=""}if(!$el.length){return}if(_.isString(binding)){binding={observe:binding}}if(_.isFunction(binding.observe)){binding.observe=binding.observe.call(self)}config=getConfiguration($el,binding);modelAttr=config.observe;config.bindId=bindId;options=_.extend({stickitChange:config},config.setOptions||{});initializeAttributes(self,$el,config,model,modelAttr);initializeVisible(self,$el,config,model,modelAttr);if(modelAttr){_.each(config.events||[],function(type){var event=type+namespace;var method=function(event){var val=config.getVal.call(self,$el,event,config);if(evaluateBoolean(self,config.updateModel,val,config)){setAttr(model,modelAttr,val,options,self,config)}};if(selector===""){self.$el.on(event,method)}else{self.$el.on(event,selector,method)}});_.each(_.flatten([modelAttr]),function(attr){observeModelEvent(model,self,"change:"+attr,function(model,val,options){var changeId=options&&options.stickitChange&&options.stickitChange.bindId||null;if(changeId!=bindId){updateViewBindEl(self,$el,config,getAttr(model,modelAttr,config,self),model)}})});updateViewBindEl(self,$el,config,getAttr(model,modelAttr,config,self),model,true)}applyViewFn(self,config.initialize,$el,model,config)});this.remove=_.wrap(this.remove,function(oldRemove){self.unstickit();if(oldRemove){oldRemove.call(self)}return self})}});var evaluatePath=function(obj,path){var parts=(path||"").split(".");var result=_.reduce(parts,function(memo,i){return memo[i]},obj);return result==null?obj:result};var applyViewFn=function(view,fn){if(fn){return(_.isString(fn)?view[fn]:fn).apply(view,_.toArray(arguments).slice(2))}};var getSelectedOption=function($select){return $select.find("option").not(function(){return !this.selected})};var evaluateBoolean=function(view,reference){if(_.isBoolean(reference)){return reference}else{if(_.isFunction(reference)||_.isString(reference)){return applyViewFn.apply(this,_.toArray(arguments))}}return false};var observeModelEvent=function(model,view,event,fn){model.on(event,fn,view);view._modelBindings.push({model:model,event:event,fn:fn})};var setAttr=function(model,attr,val,options,context,config){if(config.onSet){val=applyViewFn(context,config.onSet,val,config)}model.set(attr,val,options)};var getAttr=function(model,attr,config,context){var val,retrieveVal=function(field){var retrieved=config.escape?model.escape(field):model.get(field);return _.isUndefined(retrieved)||_.isNull(retrieved)?"":retrieved};val=_.isArray(attr)?_.map(attr,retrieveVal):retrieveVal(attr);return config.onGet?applyViewFn(context,config.onGet,val,config):val};var getConfiguration=Backbone.Stickit.getConfiguration=function($el,binding){var handlers=[{updateModel:false,updateMethod:"text",update:function($el,val,m,opts){if($el[opts.updateMethod]){$el[opts.updateMethod](val)}},getVal:function($el,e,opts){return $el[opts.updateMethod]()}}];_.each(Backbone.Stickit._handlers,function(handler){if($el.is(handler.selector)){handlers.push(handler)}});handlers.push(binding);var config=_.extend.apply(_,handlers);if(config.visible&&!_.has(config,"updateView")){config.updateView=false}else{if(!_.has(config,"updateView")){config.updateView=true}}delete config.selector;return config};var initializeAttributes=function(view,$el,config,model,modelAttr){var props=["autofocus","autoplay","async","checked","controls","defer","disabled","hidden","loop","multiple","open","readonly","required","scoped","selected"];_.each(config.attributes||[],function(attrConfig){var lastClass="",observed,updateAttr;attrConfig=_.clone(attrConfig);observed=attrConfig.observe||(attrConfig.observe=modelAttr),updateAttr=function(){var updateType=_.indexOf(props,attrConfig.name,true)>-1?"prop":"attr",val=getAttr(model,observed,attrConfig,view);if(attrConfig.name=="class"){$el.removeClass(lastClass).addClass(val);lastClass=val}else{$el[updateType](attrConfig.name,val)}};_.each(_.flatten([observed]),function(attr){observeModelEvent(model,view,"change:"+attr,updateAttr)});updateAttr()})};var initializeVisible=function(view,$el,config,model,modelAttr){if(config.visible==null){return}var visibleCb=function(){var visible=config.visible,visibleFn=config.visibleFn,val=getAttr(model,modelAttr,config,view),isVisible=!!val;if(_.isFunction(visible)||_.isString(visible)){isVisible=applyViewFn(view,visible,val,config)}if(visibleFn){applyViewFn(view,visibleFn,$el,isVisible,config)}else{if(isVisible){$el.show()}else{$el.hide()}}};_.each(_.flatten([modelAttr]),function(attr){observeModelEvent(model,view,"change:"+attr,visibleCb)});visibleCb()};var updateViewBindEl=function(view,$el,config,val,model,isInitializing){if(!evaluateBoolean(view,config.updateView,val,config)){return}config.update.call(view,$el,val,model,config);if(!isInitializing){applyViewFn(view,config.afterUpdate,$el,val,config)}};Backbone.Stickit.addHandler([{selector:'[contenteditable="true"]',updateMethod:"html",events:["input","change"]},{selector:"input",events:["propertychange","input","change"],update:function($el,val){$el.val(val)},getVal:function($el){var val=$el.val();if($el.is('[type="number"]')){return val==null?val:Number(val)}else{return val}}},{selector:"textarea",events:["propertychange","input","change"],update:function($el,val){$el.val(val)},getVal:function($el){return $el.val()}},{selector:'input[type="radio"]',events:["change"],update:function($el,val){$el.filter('[value="'+val+'"]').prop("checked",true)},getVal:function($el){return $el.filter(":checked").val()}},{selector:'input[type="checkbox"]',events:["change"],update:function($el,val,model,options){if($el.length>1){val||(val=[]);_.each($el,function(el){if(_.indexOf(val,$(el).val())>-1){$(el).prop("checked",true)}else{$(el).prop("checked",false)}})}else{if(_.isBoolean(val)){$el.prop("checked",val)}else{$el.prop("checked",val==$el.val())}}},getVal:function($el){var val;if($el.length>1){val=_.reduce($el,function(memo,el){if($(el).prop("checked")){memo.push($(el).val())}return memo},[])}else{val=$el.prop("checked");var boxval=$el.val();if(boxval!="on"&&boxval!=null){if(val){val=$el.val()}else{val=null}}}return val}},{selector:"select",events:["change"],update:function($el,val,model,options){var optList,selectConfig=options.selectOptions,list=selectConfig&&selectConfig.collection||undefined,isMultiple=$el.prop("multiple");if(!selectConfig){selectConfig={};var getList=function($el){return $el.map(function(){return{value:this.value,label:this.text}}).get()};if($el.find("optgroup").length){list={opt_labels:[]};if($el.find("> option").length){list.opt_labels.push(undefined);_.each($el.find("> option"),function(el){list[undefined]=getList($(el))})}_.each($el.find("optgroup"),function(el){var label=$(el).attr("label");list.opt_labels.push(label);list[label]=getList($(el).find("option"))})}else{list=getList($el.find("option"))}}selectConfig.valuePath=selectConfig.valuePath||"value";selectConfig.labelPath=selectConfig.labelPath||"label";var addSelectOptions=function(optList,$el,fieldVal){if(selectConfig.defaultOption){optList=_.clone(optList);optList.unshift("__default__")}_.each(optList,function(obj){var option=$("<option/>"),optionVal=obj;var fillOption=function(text,val){option.text(text);optionVal=val;option.data("stickit_bind_val",optionVal);if(!_.isArray(optionVal)&&!_.isObject(optionVal)){option.val(optionVal)}};if(obj==="__default__"){fillOption(selectConfig.defaultOption.label,selectConfig.defaultOption.value)}else{fillOption(evaluatePath(obj,selectConfig.labelPath),evaluatePath(obj,selectConfig.valuePath))}if(!isMultiple&&optionVal!=null&&fieldVal!=null&&optionVal==fieldVal||(_.isObject(fieldVal)&&_.isEqual(optionVal,fieldVal))){option.prop("selected",true)}else{if(isMultiple&&_.isArray(fieldVal)){_.each(fieldVal,function(val){if(_.isObject(val)){val=evaluatePath(val,selectConfig.valuePath)}if(val==optionVal||(_.isObject(val)&&_.isEqual(optionVal,val))){option.prop("selected",true)}})}}$el.append(option)})};$el.html("");var evaluate=function(view,list){var context=window;if(list.indexOf("this.")===0){context=view}list=list.replace(/^[a-z]*\.(.+)$/,"$1");return evaluatePath(context,list)};if(_.isString(list)){optList=evaluate(this,list)}else{if(_.isFunction(list)){optList=applyViewFn(this,list,$el,options)}else{optList=list}}if(optList instanceof Backbone.Collection){optList=optList.toJSON()}if(_.isArray(optList)){addSelectOptions(optList,$el,val)}else{_.each(optList.opt_labels,function(label){var $group=$("<optgroup/>").attr("label",label);addSelectOptions(optList[label],$group,val);$el.append($group)})}},getVal:function($el){var val;if($el.prop("multiple")){val=$(getSelectedOption($el).map(function(){return $(this).data("stickit_bind_val")})).get()}else{val=getSelectedOption($el).data("stickit_bind_val")}return val}}])})(window.jQuery||window.Zepto);